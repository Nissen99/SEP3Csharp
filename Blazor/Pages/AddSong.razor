@page "/AddSong"
@using Entities
@using System.IO
@using Blazor.Model
@inject IModalService modalService
@inject ISongManageModel songManageModel 

<h3>AddSong</h3>


<!-- Could not use "OnValidSubmit" as remove button triggered submit
Could fix later but now the method call on "Create" button-->
<EditForm Model="@newSong">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        Title:<br/>
        <InputText @bind-Value="newSong.Title" required/>
    </div>
    <div class="form-group">
        Release year:<br/>
        <InputNumber @bind-Value="defaultYear" required/>
    </div>
    <div class="form-group">
        Artist
        <button class="btn" @onclick="AddArtist">
            <i  class="oi oi-plus"/>
        </button>

        @if (newSong.Artists == null || newSong.Artists.Count == 0)
        {
            <p>
                Not Artists Added Yet.
            </p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                </tr>
                </thead>
                <tbody>
                @foreach (Artist artist in newSong.Artists)
                {
                    <tr>
                        <td>@if (artist.Id != 0)
                            {
                                <p>@artist.Id</p>
                            }
                            else
                            {
                                <p>NaN</p>
                            }
                        </td>
                        <td>@artist.Name</td>
                        <td>

                            <button @onclick="@(() => removeArtist(artist))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
    <br/>
    <div class="form-group">
        Album
        <button class="btn" @onclick="AddAlbum">
                    <i class="oi oi-plus"/>
                </button>
        <br/>
        @if (newSong.Album != null)
        {
            <p>Album Title: @newSong.Album.Title</p>
        }
        else
        {
            <p>               
                Not Album Added Yet.
            </p>
            
        }
    </div>

    <div class="form-group">
        Mp3:<br/>
        <InputFile OnChange="@LoadFile" @bind-Value="newSong.Mp3"></InputFile>
    </div>

    <p class="actions">
        <button class="btn btn-outline-dark" type="submit" @onclick="() => AddNewSong()">Create</button>
    </p>
</EditForm>

@code {

    private Song newSong = new Song();
    private int defaultYear = @DateTime.Now.Year;


    private async void LoadFile(InputFileChangeEventArgs e)
    {
        using MemoryStream ms = new MemoryStream(80000000);

        await e.File.OpenReadStream(80000000).CopyToAsync(ms);
        newSong.Mp3 = ms.ToArray();
        Console.WriteLine(newSong.Mp3.Length);
    }

    private async Task AddNewSong()
    {
        newSong.ReleaseYear = defaultYear;

        if (string.IsNullOrEmpty(newSong.Title) || newSong.Album == null || newSong.Artists.Count == 0 || newSong.Mp3 == null)
        {
            modalService.Show<Popup>("Something not sat, please make sure everything is sat");
            return;
        }
        Console.WriteLine($"Title: {newSong.Title}");

        await songManageModel.AddNewSongAsync(newSong);

    }

    private async Task AddArtist()
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add("Song", newSong);
        var form = modalService.Show<NewOrExistingArtist>("Make new artist or choose existing", parameters);
        var result = await form.Result;

        if (!result.Cancelled)
        {
            Artist justCreated = (Artist) result.Data;
            newSong.Artists.Add(justCreated);
            StateHasChanged();
        }
    }

    private void removeArtist(Artist artist)
    {
        newSong.Artists.Remove(artist);
        StateHasChanged();
    }

    private async Task AddAlbum()
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add("Song", newSong);
        var form = modalService.Show<NewOrExistingAlbum>("Make new album or choose existing", parameters);
        var result = await form.Result;

        if (!result.Cancelled)
        {
            Album justCreated = (Album) result.Data;
            newSong.Album = justCreated;
            StateHasChanged();
        }
    }

}